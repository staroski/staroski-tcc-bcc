~~ @version $Revision: 2546 $ ($Author: skarzhevskyy $) $Date: 2008-12-10 11:40:32 -0500 (Wed, 10 Dec 2008) $
~~ See this file format http://maven.apache.org/guides/mini/guide-apt-format.html

                                    ------------------
                                    Testing BlueCove with JSR 82 Technology Compatibility Kit (TCK)
                                    ------------------

JSR 82 Technology Compatibility Kit

    The TCK for JSR 82 is available under the terms of the Motorola Extensible License! Anyone can now freely download, view, and execute the JSR 82 TCK.

    JSR-82 project website {{{https://opensource.motorola.com/sf/sfmain/do/viewProject/projects.jsr82}https://opensource.motorola.com/sf/sfmain/do/viewProject/projects.jsr82}}


* BlueCove TCK Tests on Windows, Linux and Mac OS X

    Latest test reports for Bluetooth_1-1-1_002_TCK can be found {{{Bluetooth_1-1-1_002_TCK/}here}}. See Description of {{{#failures}failures}}.

    Latest test reports for OBEX_1-1-1_002_TCK can be found {{{OBEX_1-1-1_002_TCK/}here}}.

    {{{#previous} TCK tests for previous releases of BlueCove}}

    L2CAP connection can't be implemented on Microsoft stack. Because of this BlueCove JSR-82 implementation can't be certified on  Microsoft stack. L2CAP tests has been excluded from run on this stack to save time

    To run TCK we are using:

    * {{{https://opensource.motorola.com/sf/sfmain/do/viewProject/projects.gatling}Gatling}} v1.0.05 test harness

    * {{{http://www.microemu.org/}MicroEmulator}} v2.0.3 as MIDP container.

    * BlueCove GPL on Fedora 9 32-bit as Main TCK agent
    
    * BlueCove on WIDCOMM stack as TCK agent for Microsoft stack and Mac OS X tests

    * BlueCove on Mac OS X as TCK agent for WIDCOMM stack tests

    * Cellphone Sony Ericson K790a as TCK agent

    * Sun Java Wireless Toolkit 2.5.2 as OBEX TCK agent for <<<tcpobex>>> tests

    []

    Test environment

    * Sun Java(TM) SE Runtime Environment (build 1.6.0_11-b03)

    * System 1 TCK Client, WinXP SP2, Intel Pentium M 1.7 GHz, RAM 1.25 GB, WIDCOMM (Broadcom Bluetooth stack) v5.1.0.4200, {{{http://www.trust.com/14693}TRUST Bluetooth 2.0 EDR USB Adapter BT-2210Tp}}

    * System 1 TCK Client, WinXP SP2, Intel Pentium M 1.7 GHz, RAM 1.25 GB, Microsoft Bluetooth stack, {{{http://www.dlink.com/products/?pid=34}D-Link DBT-120 Rev. B4}}

    * System 2 TCK Agent, WinXP SP2, Intel Core 2 Duo 1.5 GHz, RAM 1GB, WIDCOMM (Broadcom Bluetooth stack) v5.1.0.4200, {{{http://www.trust.com/14693}TRUST Bluetooth 2.0 EDR USB Adapter BT-2210Tp}}

    * System 3 TCK Client, Mac OS X 10.5.5 i386, Two 2.8GHz Quad-Core Intel Xeon, Java: Apple Computer Inc. 1.5.0_16,  Integrated Cambridge Silicon Radio Firmware 3.1965
    
    ~~ {{{http://www.trust.com/14693}TRUST Bluetooth 2.0 EDR USB Adapter BT-2210Tp}}

    * System 4 TCK Client, Fedora 9 32-bit, BlueZ v3.36, {{{http://www.trust.com/14693}TRUST Bluetooth 2.0 EDR USB Adapter BT-2210Tp}}
    
    []

* Description of {failures}

    * ServiceRecord.setDeviceServiceClassesTest: Function ServiceRecord.setDeviceServiceClasses not implemented because there are no such API in WIDCOMM native stack

    * L2CAPConnection.receiveTest.L2CAPConnectionTest0035 and L2CAPConnection.sendTest.L2CAPConnectionTest0025 are test for an empty L2CAP packet; Only works on Linux BlueZ, other native stacks do not support this.

    []

* Starting TCK client

 Here is how you would run the JSR 82 TCK Gatling tests on BlueCove in the "autotest" mode with the help of MicroEmulator:

---
    java -cp microemulator.jar;bluecove.jar org.microemu.app.Main -Xautotest:http://localhost:8080/getNextApp.jad
---

* Starting TCK client as Java Web Start

    * <<<{{{../bluecove-examples/bluecove-webstart/tck/localhost:8080/getNextApp.jnlp}\u00bbStart TCK client (detect), Gatling on localhost:8080}}>>>

    * <<<{{{../bluecove-examples/bluecove-webstart/tck/tckhost:8080/getNextApp.jnlp}\u00bbStart TCK client (detect), Gatling on tckhost:8080}}>>>

    * <<<{{{../bluecove-examples/bluecove-webstart/tck-dev-1/tckhost:8080/getNextApp.jnlp}\u00bbStart TCK client on BlueZ Device 1, Gatling on tckhost:8080}}>>>
    
    * <<<{{{../bluecove-examples/bluecove-webstart/tck-dev-2/tckhost:8080/getNextApp.jnlp}\u00bbStart TCK client on BlueZ Device 2, Gatling on tckhost:8080}}>>>
    
    * <<<{{{../bluecove-examples/bluecove-webstart/tck-widcomm/tckhost:8080/getNextApp.jnlp}\u00bbStart TCK client on WIDCOMM, Gatling on tckhost:8080}}>>>

 You will need a TCK agent running on another bluetooth device use  {{{../bluecove-examples/bluecove-tester}bluecove-tester Web Start}}.

 Illustrated guide {{{tck4dev.html}Running Gatling and TCK for bluecove developers}}
 

* TCK tests for {previous} releases of BlueCove

    * {{{Bluetooth_1-1_005_TCK/}Bluetooth_1-1_005_TCK bluecove-2.0.1}}

    * {{{OBEX_1-1_005_TCK/}OBEX_1-1_005_TCK bluecove-2.0.1}}

    * {{{Bluetooth_1-1_006_TCK/}Bluetooth_1-1_006_TCK bluecove-2.0.2}}

    * {{{OBEX_1-1_006_TCK/}OBEX_1-1_006_TCK bluecove-2.0.2}}

    * {{{Bluetooth_1-1_007_TCK/}Bluetooth_1-1_007_TCK bluecove-2.0.3}}

    * {{{OBEX_1-1_007_TCK/}OBEX_1-1_007_TCK bluecove-2.0.3}}

